# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on macOS

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release
  QT5_DIR: "/usr/local/opt/qt@5/lib/cmake/Qt5"
  OpenMP_ROOT: "/usr/local/Cellar/libomp/18.1.8"
  MSC_SSH_PLUGINS: ${{ secrets.MSC_SSH_PLUGINS }}
  MSC_TOKEN: ${{ secrets.MSC_TOKEN }}

jobs:
  build:
    # https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job#standard-github-hosted-runners-for-public-repositories
    runs-on: macos-12

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "$MSC_SSH_PLUGINS" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Install dependencies
      run: |
        # brew info cmake
        brew install qt@5
        brew install boost
        # brew info swig
        # brew info libomp        
        pip3 install dmgbuild

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_GITHUB_SSH:BOOL=TRUE -DQt5_DIR=$QT5_DIR -DOpenMP_ROOT=$OpenMP_ROOT

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config $BUILD_TYPE --parallel

    - name: Package
      run: |
        cd ${{github.workspace}}/build
        cpack -C $BUILD_TYPE

    - name: Prepare DMG and update design
      run: |
        cd ${{github.workspace}}/build
        dmg=$(ls *.dmg)
        echo "The current package to adapt: $dmg"

        if [ -n "$dmg" ]; then
          # Attach to read-write format and retrieve mount path
          path=$(hdiutil attach -owners on $dmg -shadow | grep -i 'Volumes' | cut -f 3)
          echo "The current path: $path"

          # Navigate to correct directory
          cd "$path/MUSICardio.app/Contents/"

          pathPluginsLegacy="${{github.workspace}}/build/medInria-build/bin/plugins_legacy"

          # Change library paths for plugins
          for f in PlugIns/*.dylib; do
            install_name_tool -change $pathPluginsLegacy/libAAMeshInteractorPlugin.dylib  @executable_path/../PlugIns/libAAMeshInteractorPlugin.dylib $f
            install_name_tool -change $pathPluginsLegacy/libAAAMeshUtilityPlugin.dylib    @executable_path/../PlugIns/libAAAMeshUtilityPlugin.dylib $f
            install_name_tool -change $pathPluginsLegacy/libAAAmedPipelinePlugin.dylib    @executable_path/../PlugIns/libAAAmedPipelinePlugin.dylib $f
            install_name_tool -change $pathPluginsLegacy/libmscPipelinesPlugin.dylib      @executable_path/../PlugIns/libmscPipelinesPlugin.dylib $f
            install_name_tool -change $pathPluginsLegacy/libAAAEPMapPlugin.dylib          @executable_path/../PlugIns/libAAAEPMapPlugin.dylib $f
            install_name_tool -change $pathPluginsLegacy/libAAMFSSimulationPlugin.dylib   @executable_path/../PlugIns/libAAMFSSimulationPlugin.dylib $f
            install_name_tool -change $pathPluginsLegacy/libFEMForwardProblemPlugin.dylib @executable_path/../PlugIns/libFEMForwardProblemPlugin.dylib $f
          done

          # Go back to original path
          cd "${{github.workspace}}/build"

          # Update dmg design
          echo "### Now we are going to update the dmg design"
          volumeName=$(basename "$path")
          dmgbuild -s ../packaging/apple/settings.json "$volumeName" MUSICardio.dmg

          echo "End of the processes"
        else
          echo "A problem happened in MSC compilation, no dmg is built"
        fi       

    - name: Install Git LFS
      run: git lfs install
      
    - name: Transfer binary to external repository
      run: |
        git clone https://$MSC_TOKEN:@github.com/Inria-Asclepios/msc_binaries.git
        cd msc_binaries
        cp ../build/MUSICardio.dmg .
        git lfs track "*.dmg"
        git add .gitattributes MUSICardio.dmg
        git commit -m "Add new DMG file"
        git push
